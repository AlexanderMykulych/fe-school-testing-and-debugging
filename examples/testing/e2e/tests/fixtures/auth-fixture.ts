import { test as base, expect, Page } from '@playwright/test'

// –¢–∏–ø–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ä–æ–ª–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
export interface User {
  username: string
  password: string
  role: 'admin' | 'user'
  displayName: string
}

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è auth fixture
interface AuthFixture {
  loginAsAdmin: () => Promise<void>
  loginAsUser: () => Promise<void>
  logout: () => Promise<void>
  ensureLoggedOut: () => Promise<void>
  getCurrentUser: () => Promise<User | null>
}

// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
const testUsers: Record<string, User> = {
  admin: {
    username: 'admin',
    password: 'admin123',
    role: 'admin',
    displayName: 'admin'
  },
  user: {
    username: 'user',
    password: 'user123',
    role: 'user',
    displayName: 'user'
  }
}

// –†–æ–∑—à–∏—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç –∑ auth fixture
export const test = base.extend<AuthFixture>({
  /**
   * üîê Auth Fixture - –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É—î –ø—Ä–æ—Ü–µ—Å–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  loginAsAdmin: async ({ page }, use) => {
    const loginAsAdmin = async () => {
      await loginUser(page, testUsers.admin)
    }
    await use(loginAsAdmin)
  },

  loginAsUser: async ({ page }, use) => {
    const loginAsUser = async () => {
      await loginUser(page, testUsers.user)
    }
    await use(loginAsUser)
  },

  logout: async ({ page }, use) => {
    const logout = async () => {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
      const userGreeting = page.getByTestId('user-greeting')
      if (await userGreeting.isVisible()) {
        await page.getByTestId('logout-button').click()
        
        // –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ç–∞ –∑–º—ñ–Ω—É UI
        await expect(page.getByTestId('login-link')).toBeVisible()
        await expect(userGreeting).not.toBeVisible()
      }
    }
    await use(logout)
  },

  ensureLoggedOut: async ({ page }, use) => {
    const ensureLoggedOut = async () => {
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
      await page.goto('/')
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
      const loginLink = page.getByTestId('login-link')
      const userGreeting = page.getByTestId('user-greeting')
      
      if (await userGreeting.isVisible()) {
        // –Ø–∫—â–æ –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π - –≤–∏–ª–æ–≥—ñ–Ω—é—î–º–æ—Å—è
        await page.getByTestId('logout-button').click()
        await expect(loginLink).toBeVisible()
      }
    }
    await use(ensureLoggedOut)
  },

  getCurrentUser: async ({ page }, use) => {
    const getCurrentUser = async (): Promise<User | null> => {
      const userGreeting = page.getByTestId('user-greeting')
      
      if (await userGreeting.isVisible()) {
        const greetingText = await userGreeting.textContent()
        
        // –ü–∞—Ä—Å–∏–º–æ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
        if (greetingText?.includes('admin')) {
          return testUsers.admin
        } else if (greetingText?.includes('user')) {
          return testUsers.user
        }
      }
      
      return null
    }
    await use(getCurrentUser)
  }
})

/**
 * üîë –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 */
async function loginUser(page: Page, user: User): Promise<void> {
  // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ª–æ–≥—ñ–Ω—É
  await page.goto('/login')
  
  // –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏
  await expect(page.getByTestId('login-form')).toBeVisible()
  
  // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É
  await page.getByTestId('username-input').fill(user.username)
  await page.getByTestId('password-input').fill(user.password)
  
  // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ä–º—É
  await page.getByTestId('submit-button').click()
  
  // –ß–µ–∫–∞—î–º–æ –Ω–∞ —É—Å–ø—ñ—à–Ω–∏–π –ª–æ–≥—ñ–Ω
  await expect(page.getByTestId('success-notification')).toBeVisible()
  
  // –ß–µ–∫–∞—î–º–æ –Ω–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
  await page.waitForURL('/')
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–æ–≥—ñ–Ω–µ–Ω–∏–π
  await expect(page.getByTestId('user-greeting')).toBeVisible()
  await expect(page.getByTestId('user-greeting')).toContainText(user.displayName)
}

/**
 * üßπ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è localStorage
 */
export async function clearAuthData(page: Page): Promise<void> {
  await page.evaluate(() => {
    localStorage.removeItem('user')
    localStorage.removeItem('cart')
  })
}

/**
 * üìù –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
 */
export async function expectLoggedIn(page: Page, user?: User): Promise<void> {
  await expect(page.getByTestId('user-greeting')).toBeVisible()
  await expect(page.getByTestId('logout-button')).toBeVisible()
  await expect(page.getByTestId('login-link')).not.toBeVisible()
  
  if (user) {
    await expect(page.getByTestId('user-greeting')).toContainText(user.displayName)
  }
}

/**
 * üö™ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –≥–æ—Å—Ç—è
 */
export async function expectLoggedOut(page: Page): Promise<void> {
  await expect(page.getByTestId('login-link')).toBeVisible()
  await expect(page.getByTestId('user-greeting')).not.toBeVisible()
  await expect(page.getByTestId('logout-button')).not.toBeVisible()
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ expect –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
export { expect } 
import { GenericContainer, StartedTestContainer } from 'testcontainers'
import { writeFileSync, existsSync } from 'fs'
import { join } from 'path'

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
let redisContainer: StartedTestContainer | null = null

// –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
const configPath = join(__dirname, 'redis-config.json')

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
 * –ó–∞–ø—É—Å–∫–∞—î Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å—ñ—Ö —Ç–µ—Å—Ç—ñ–≤
 */
export async function setup() {
  console.log('–ì–ª–æ–±–∞–ª—å–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: –∑–∞–ø—É—Å–∫ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...')
  
  try {
    redisContainer = await new GenericContainer('redis:7.0-alpine')
      .withExposedPorts(6379)
      .withReuse() // –ü–µ—Ä–µ–≤–∞–∂–Ω–æ—Å—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
      .start()

    const redisHost = redisContainer.getHost()
    const redisPort = redisContainer.getMappedPort(6379)
    
    console.log(`Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ ${redisHost}:${redisPort}`)
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤ —Ñ–∞–π–ª
    const config = {
      host: redisHost,
      port: redisPort,
      timestamp: Date.now()
    }
    
    writeFileSync(configPath, JSON.stringify(config, null, 2))
    console.log(`–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ ${configPath}`)
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', error)
    throw error
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—ñ–≤
 * –ó—É–ø–∏–Ω—è—î Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —ñ –≤–∏–¥–∞–ª—è—î —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 */
export async function teardown() {
  console.log('–ì–ª–æ–±–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è: –∑—É–ø–∏–Ω–∫–∞ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...')
  
  if (redisContainer) {
    try {
      await redisContainer.stop()
      console.log('Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ')
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', error)
    }
  }
  
  // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  try {
    if (existsSync(configPath)) {
      const { unlinkSync } = await import('fs')
      unlinkSync(configPath)
      console.log('–§–∞–π–ª –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ')
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:', error)
  }
}

/**
 * üì¶ –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ Redis
 */
export function getRedisConfig() {
  const { readFileSync } = require('fs')
  
  if (!existsSync(configPath)) {
    throw new Error('Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ globalSetup –≤–∏–∫–æ–Ω–∞–≤—Å—è.')
  }
  
  try {
    const configData = readFileSync(configPath, 'utf-8')
    const config = JSON.parse(configData)
    
    if (!config.host || !config.port) {
      throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞.')
    }
    
    return { host: config.host, port: config.port }
  } catch (error) {
    throw new Error(`–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Redis: ${error}`)
  }
} 
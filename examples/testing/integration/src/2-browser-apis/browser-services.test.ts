import { test, expect, beforeEach, vi } from 'vitest'
import { StorageService, type UserPreferences, type SessionData } from './storage-service'
import { LocationService, type Position, type LocationError } from './location-service'
import { NotificationService, type NotificationOptions } from './notification-service'

// üì¶ –¢–µ—Å—Ç–∏ –¥–ª—è StorageService

test('–ø–æ–≤–∏–Ω–µ–Ω –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±\'—î–∫—Ç –∑ localStorage', () => {
  // –ú–æ–∫–∞—î–º–æ localStorage
  const mockLocalStorage = {
    data: {} as Record<string, string>,
    setItem: vi.fn((key: string, value: string) => {
      mockLocalStorage.data[key] = value
    }),
    getItem: vi.fn((key: string) => mockLocalStorage.data[key] || null),
    removeItem: vi.fn((key: string) => {
      delete mockLocalStorage.data[key]
    }),
    clear: vi.fn(() => {
      mockLocalStorage.data = {}
    })
  }

  const storageService = new StorageService(
    mockLocalStorage as any,
    mockLocalStorage as any
  )

  const testData = { name: '–¢–µ—Å—Ç', value: 123 }
  
  // –¢–µ—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const saveResult = storageService.setItem('test', testData)
  expect(saveResult).toBe(true)
  expect(mockLocalStorage.setItem).toHaveBeenCalledWith('test', JSON.stringify(testData))

  // –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è
  const retrievedData = storageService.getItem('test')
  expect(retrievedData).toEqual(testData)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ null –¥–ª—è –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –∫–ª—é—á–∞', () => {
  const mockStorage = {
    getItem: vi.fn(() => null)
  }

  const storageService = new StorageService(mockStorage as any, mockStorage as any)
  const result = storageService.getItem('nonexistent')
  
  expect(result).toBeNull()
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –≤ localStorage', () => {
  const mockStorage = {
    setItem: vi.fn(() => {
      throw new Error('Storage quota exceeded')
    })
  }

  const storageService = new StorageService(mockStorage as any, mockStorage as any)
  const result = storageService.setItem('test', { data: 'test' })
  
  expect(result).toBe(false)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', () => {
  const mockStorage = {
    data: {} as Record<string, string>,
    setItem: vi.fn((key: string, value: string) => {
      mockStorage.data[key] = value
    }),
    getItem: vi.fn((key: string) => mockStorage.data[key] || null)
  }

  const storageService = new StorageService(mockStorage as any, mockStorage as any)
  
  const preferences: UserPreferences = {
    theme: 'dark',
    language: 'en',
    notifications: false
  }

  storageService.saveUserPreferences(preferences)
  const retrieved = storageService.getUserPreferences()
  
  expect(retrieved).toEqual(preferences)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º', () => {
  const mockStorage = {
    getItem: vi.fn(() => null)
  }

  const storageService = new StorageService(mockStorage as any, mockStorage as any)
  const preferences = storageService.getUserPreferencesWithDefaults()
  
  expect(preferences).toEqual({
    theme: 'light',
    language: 'uk',
    notifications: true
  })
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Å–µ—Å—ñ–π–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏', () => {
  const mockSessionStorage = {
    data: {} as Record<string, string>,
    setItem: vi.fn((key: string, value: string) => {
      mockSessionStorage.data[key] = value
    }),
    getItem: vi.fn((key: string) => mockSessionStorage.data[key] || null),
    removeItem: vi.fn((key: string) => {
      delete mockSessionStorage.data[key]
    })
  }

  const storageService = new StorageService({} as any, mockSessionStorage as any)
  
  const sessionData: SessionData = {
    token: 'abc123',
    userId: 42,
    expiresAt: Date.now() + 3600000 // 1 –≥–æ–¥–∏–Ω–∞
  }

  // –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–µ—Å—ñ—é
  storageService.saveSession(sessionData)
  expect(mockSessionStorage.setItem).toHaveBeenCalled()

  // –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é
  const retrieved = storageService.getSession()
  expect(retrieved).toEqual(sessionData)

  // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
  expect(storageService.isSessionValid()).toBe(true)

  // –û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—é
  storageService.clearSession()
  expect(mockSessionStorage.removeItem).toHaveBeenCalledWith('session')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —â–æ —Å–µ—Å—ñ—è –Ω–µ –≤–∞–ª—ñ–¥–Ω–∞', () => {
  const expiredSession: SessionData = {
    token: 'expired',
    userId: 1,
    expiresAt: Date.now() - 1000 // –ú–∏–Ω—É–ª–∞ —Å–µ–∫—É–Ω–¥–∞
  }

  const mockStorage = {
    getItem: vi.fn(() => JSON.stringify(expiredSession))
  }

  const storageService = new StorageService({} as any, mockStorage as any)
  
  expect(storageService.isSessionValid()).toBe(false)
})

// üìç –¢–µ—Å—Ç–∏ –¥–ª—è LocationService

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó', () => {
  // –ú–æ–∫–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
  const mockGeolocation = {
    getCurrentPosition: vi.fn(),
    watchPosition: vi.fn(),
    clearWatch: vi.fn()
  }

  const locationService = new LocationService(mockGeolocation)
  
  expect(locationService.isGeolocationSupported()).toBe(true)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø–æ–∑–∏—Ü—ñ—é', async () => {
  const mockPosition: Position = {
    latitude: 50.4501,
    longitude: 30.5234,
    accuracy: 10,
    timestamp: Date.now()
  }

  const mockGeolocation = {
    getCurrentPosition: vi.fn((success) => {
      success({
        coords: {
          latitude: mockPosition.latitude,
          longitude: mockPosition.longitude,
          accuracy: mockPosition.accuracy
        },
        timestamp: mockPosition.timestamp
      })
    }),
    watchPosition: vi.fn(),
    clearWatch: vi.fn()
  }

  const locationService = new LocationService(mockGeolocation)
  const position = await locationService.getCurrentPosition()
  
  expect(position).toEqual(mockPosition)
  expect(mockGeolocation.getCurrentPosition).toHaveBeenCalled()
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–º–∏–ª–∫—É –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó', async () => {
  const mockGeolocation = {
    getCurrentPosition: vi.fn((success, error) => {
      error({
        code: 1, // PERMISSION_DENIED
        message: 'User denied Geolocation'
      })
    }),
    watchPosition: vi.fn(),
    clearWatch: vi.fn()
  }

  const locationService = new LocationService(mockGeolocation)
  
  await expect(locationService.getCurrentPosition()).rejects.toMatchObject({
    code: 1,
    message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–æ—Ä–æ–Ω–∏–≤ –¥–æ—Å—Ç—É–ø –¥–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó'
  })
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ–±—á–∏—Å–ª–∏—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏', () => {
  const locationService = new LocationService({} as any)
  
  const kyiv: Position = {
    latitude: 50.4501,
    longitude: 30.5234,
    accuracy: 10,
    timestamp: Date.now()
  }
  
  const lviv: Position = {
    latitude: 49.8397,
    longitude: 24.0297,
    accuracy: 10,
    timestamp: Date.now()
  }

  const distance = locationService.calculateDistance(kyiv, lviv)
  
  // –ü—Ä–∏–±–ª–∏–∑–Ω–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –ö–∏—î–≤–æ–º —Ç–∞ –õ—å–≤–æ–≤–æ–º ~470–∫–º
  expect(distance).toBeGreaterThan(450000)
  expect(distance).toBeLessThan(500000)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ–∑–∏—Ü—ñ—è –≤ –º–µ–∂–∞—Ö –æ–±–ª–∞—Å—Ç—ñ', () => {
  const locationService = new LocationService({} as any)
  
  const center: Position = {
    latitude: 50.4501,
    longitude: 30.5234,
    accuracy: 10,
    timestamp: Date.now()
  }
  
  const nearby: Position = {
    latitude: 50.4510, // –¢—Ä–æ—Ö–∏ –ø—ñ–≤–Ω—ñ—á–Ω—ñ—à–µ
    longitude: 30.5240, // –¢—Ä–æ—Ö–∏ —Å—Ö—ñ–¥–Ω—ñ—à–µ
    accuracy: 10,
    timestamp: Date.now()
  }

  const isWithin = locationService.isWithinArea(nearby, center, 1000) // 1–∫–º —Ä–∞–¥—ñ—É—Å
  expect(isWithin).toBe(true)
})

test('–ø–æ–≤–∏–Ω–µ–Ω —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ –∑–∞ –ø–æ–∑–∏—Ü—ñ—î—é', () => {
  let successCallback: any
  let errorCallback: any
  
  const mockGeolocation = {
    getCurrentPosition: vi.fn(),
    watchPosition: vi.fn((success, error) => {
      successCallback = success
      errorCallback = error
      return 12345 // watchId
    }),
    clearWatch: vi.fn()
  }

  const locationService = new LocationService(mockGeolocation)
  
  const onSuccess = vi.fn()
  const onError = vi.fn()
  
  const watchId = locationService.watchPosition(onSuccess, onError)
  
  expect(watchId).toBe(12345)
  expect(mockGeolocation.watchPosition).toHaveBeenCalled()
  
  // –°–∏–º—É–ª—é—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –∫–æ–ª–±–µ–∫
  successCallback({
    coords: { latitude: 50, longitude: 30, accuracy: 10 },
    timestamp: Date.now()
  })
  
  expect(onSuccess).toHaveBeenCalled()
})

// üîî –¢–µ—Å—Ç–∏ –¥–ª—è NotificationService

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π', () => {
  const mockNotification = vi.fn()
  const notificationService = new NotificationService(mockNotification as any)
  
  // –í —Ç–µ—Å—Ç–æ–≤–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ Notification –º–æ–∂–µ –Ω–µ –±—É—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–º
  // –¢–æ–º—É –º–∏ –º–æ–∂–µ–º–æ –º–æ–∫–∞—Ç–∏ —Ü–µ
  Object.defineProperty(window, 'Notification', {
    value: mockNotification,
    writable: true
  })
  
  expect(notificationService.isNotificationSupported()).toBe(true)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–æ–∑–≤–æ–ª—É', () => {
  const mockNotification = {
    permission: 'granted'
  }
  
  const notificationService = new NotificationService(mockNotification as any)
  
  expect(notificationService.getPermissionStatus()).toBe('granted')
})

test('–ø–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø—Ä–æ—Å—Ç—É –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é', async () => {
  const mockNotificationInstance = {
    onclick: null,
    onshow: null,
    onclose: null,
    onerror: null
  }
  
  const mockNotification = vi.fn(() => mockNotificationInstance)
  mockNotification.permission = 'granted'
  
  const notificationService = new NotificationService(mockNotification as any)
  
  const result = await notificationService.showSimpleNotification(
    '–¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫',
    '–¢–µ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
  )
  
  expect(result.success).toBe(true)
  expect(result.notification).toBe(mockNotificationInstance)
  expect(mockNotification).toHaveBeenCalledWith('–¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫', {
    body: '–¢–µ—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
  })
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–æ–∑–≤–æ–ª—É', async () => {
  const mockNotification = {
    permission: 'denied'
  }
  
  const notificationService = new NotificationService(mockNotification as any)
  
  const result = await notificationService.showSimpleNotification(
    '–¢–µ—Å—Ç',
    '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
  )
  
  expect(result.success).toBe(false)
  expect(result.error).toBe('–î–æ–∑–≤—ñ–ª –Ω–∞ –ø–æ–∫–∞–∑ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ–π –Ω–µ –Ω–∞–¥–∞–Ω–æ')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó', async () => {
  const mockNotification = {
    permission: 'default',
    requestPermission: vi.fn().mockResolvedValue('granted')
  }
  
  const notificationService = new NotificationService(mockNotification as any)
  
  const permission = await notificationService.requestPermission()
  
  expect(permission).toBe('granted')
  expect(mockNotification.requestPermission).toHaveBeenCalled()
})

test('–ø–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏ –ø–æ–¥—ñ–π', async () => {
  const mockNotificationInstance = {
    onclick: null,
    onshow: null,
    onclose: null,
    onerror: null
  }
  
  const mockNotification = vi.fn(() => mockNotificationInstance)
  mockNotification.permission = 'granted'
  
  const notificationService = new NotificationService(mockNotification as any)
  
  const onClick = vi.fn()
  const onShow = vi.fn()
  
  const result = await notificationService.createNotificationWithHandlers(
    { title: '–¢–µ—Å—Ç', body: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è' },
    { onClick, onShow }
  )
  
  expect(result.success).toBe(true)
  expect(mockNotificationInstance.onclick).toBe(onClick)
  expect(mockNotificationInstance.onshow).toBe(onShow)
}) 
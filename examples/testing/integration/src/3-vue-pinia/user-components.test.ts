import { test, expect, beforeEach, vi } from 'vitest'
import { mount, VueWrapper } from '@vue/test-utils'
import { createPinia, setActivePinia } from 'pinia'
import { http, HttpResponse } from 'msw'
import { server } from '../../test/mocks/server'
import { useUserStore, type User } from './stores/user-store'
import UserProfile from './components/UserProfile.vue'
import UserList from './components/UserList.vue'

// Setup –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
beforeEach(() => {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π Pinia instance –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç—É
  setActivePinia(createPinia())
})

// Mock –¥–ª—è window.confirm
const mockConfirm = vi.fn()
Object.defineProperty(window, 'confirm', { value: mockConfirm })

// üë§ –¢–µ—Å—Ç–∏ UserProfile –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ "–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –æ–±—Ä–∞–Ω–∏–π" –∫–æ–ª–∏ –Ω–µ–º–∞—î currentUser', () => {
  const wrapper = mount(UserProfile)
  
  expect(wrapper.find('[data-testid="no-user"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="no-user"]').text()).toContain('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –æ–±—Ä–∞–Ω–∏–π')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ store', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'test@example.com',
    active: true,
    role: 'admin'
  }

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  store.setCurrentUser(mockUser)

  const wrapper = mount(UserProfile)
  
  expect(wrapper.find('[data-testid="profile-content"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="user-name"]').text()).toBe(mockUser.name)
  expect(wrapper.find('[data-testid="user-email"]').text()).toBe(mockUser.email)
  expect(wrapper.find('[data-testid="status-badge"]').text()).toBe('–ê–∫—Ç–∏–≤–Ω–∏–π')
  expect(wrapper.find('[data-testid="role-badge"]').text()).toBe('–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ userId prop', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 42,
    name: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞ ID',
    email: 'userid@example.com',
    active: false,
    role: 'user'
  }

  // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ store
  store.addUser(mockUser)

  const wrapper = mount(UserProfile, {
    props: { userId: 42 }
  })
  
  expect(wrapper.find('[data-testid="user-name"]').text()).toBe(mockUser.name)
  expect(wrapper.find('[data-testid="status-badge"]').text()).toBe('–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π')
  expect(wrapper.find('[data-testid="role-badge"]').text()).toBe('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', async () => {
  const store = useUserStore()
  store.loading = true

  const wrapper = mount(UserProfile)
  
  expect(wrapper.find('[data-testid="loading"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="loading"]').text()).toContain('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É —Ç–∞ –∫–Ω–æ–ø–∫—É –æ—á–∏—â–µ–Ω–Ω—è', async () => {
  const store = useUserStore()
  store.error = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'

  const wrapper = mount(UserProfile)
  
  expect(wrapper.find('[data-testid="error"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="error"]').text()).toContain('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
  
  // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –æ—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
  await wrapper.find('[data-testid="clear-error-btn"]').trigger('click')
  
  expect(store.error).toBeNull()
})

test('–ø–æ–≤–∏–Ω–µ–Ω –µ–º—ñ—Ç–∏—Ç–∏ –ø–æ–¥—ñ—ó –ø—Ä–∏ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'test@example.com',
    active: true,
    role: 'user'
  }

  store.setCurrentUser(mockUser)

  const wrapper = mount(UserProfile)

  // –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
  await wrapper.find('[data-testid="edit-user-btn"]').trigger('click')
  
  const editEvents = wrapper.emitted('editRequested')
  expect(editEvents).toHaveLength(1)
  expect(editEvents![0]).toEqual([mockUser])
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'test@example.com',
    active: true,
    role: 'user'
  }

  store.setCurrentUser(mockUser)

  // –ú–æ–∫–∞—î–º–æ API –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  server.use(
    http.put('/api/users/1', () => {
      return HttpResponse.json({
        ...mockUser,
        active: false
      })
    })
  )

  const wrapper = mount(UserProfile)

  // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
  await wrapper.find('[data-testid="toggle-active-btn"]').trigger('click')

  // –ß–µ–∫–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
  await wrapper.vm.$nextTick()

  const updateEvents = wrapper.emitted('userUpdated')
  expect(updateEvents).toHaveLength(1)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'test@example.com',
    active: true,
    role: 'user'
  }

  store.setCurrentUser(mockUser)
  mockConfirm.mockReturnValue(true) // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è

  const wrapper = mount(UserProfile)

  // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  await wrapper.find('[data-testid="delete-user-btn"]').trigger('click')

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ confirm –±—É–ª–æ –≤–∏–∫–ª–∏–∫–∞–Ω–æ
  expect(mockConfirm).toHaveBeenCalledWith(
    expect.stringContaining('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á?')
  )

  const deleteEvents = wrapper.emitted('userDeleted')
  expect(deleteEvents).toHaveLength(1)
  expect(deleteEvents![0]).toEqual([mockUser.id])
})

// üìã –¢–µ—Å—Ç–∏ UserList –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

test('–ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ store', async () => {
  const store = useUserStore()
  const mockUsers: User[] = [
    {
      id: 1,
      name: '–ü–µ—Ä—à–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      email: 'first@example.com',
      active: true,
      role: 'admin'
    },
    {
      id: 2,
      name: '–î—Ä—É–≥–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      email: 'second@example.com',
      active: false,
      role: 'user'
    }
  ]

  // –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ store
  mockUsers.forEach(user => store.addUser(user))

  const wrapper = mount(UserList)
  
  expect(wrapper.find('[data-testid="user-cards"]').exists()).toBe(true)
  expect(wrapper.findAll('[data-testid^="user-card-"]')).toHaveLength(2)
  expect(wrapper.find('[data-testid="user-name-1"]').text()).toBe('–ü–µ—Ä—à–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
  expect(wrapper.find('[data-testid="user-name-2"]').text()).toBe('–î—Ä—É–≥–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å—Ç–∞–Ω –∫–æ–ª–∏ –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', async () => {
  const wrapper = mount(UserList)
  
  expect(wrapper.find('[data-testid="empty-state"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="empty-state"]').text()).toContain('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')
})

test('–ø–æ–≤–∏–Ω–µ–Ω —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –∑–∞–ø–∏—Ç–æ–º', async () => {
  const store = useUserStore()
  const mockUsers: User[] = [
    {
      id: 1,
      name: '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      email: 'ivan@example.com',
      active: true,
      role: 'user'
    },
    {
      id: 2,
      name: '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞',
      email: 'maria@example.com',
      active: true,
      role: 'user'
    }
  ]

  mockUsers.forEach(user => store.addUser(user))

  const wrapper = mount(UserList)

  // –í–≤–æ–¥–∏–º–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
  const searchInput = wrapper.find('[data-testid="search-input"]')
  await searchInput.setValue('–Ü–≤–∞–Ω')

  // –ß–µ–∫–∞—î–º–æ —â–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞—Å—Ç–æ—Å—É–≤–∞–≤—Å—è
  await wrapper.vm.$nextTick()

  // –ü–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ "–Ü–≤–∞–Ω" –≤ —ñ–º–µ–Ω—ñ
  expect(store.filteredUsers).toHaveLength(2) // –Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤ —Ç–∞ –ú–∞—Ä—ñ—è –Ü–≤–∞–Ω–æ–≤–∞ (email)
})

test('–ø–æ–≤–∏–Ω–µ–Ω —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ —Ä–æ–ª–ª—é', async () => {
  const store = useUserStore()
  const mockUsers: User[] = [
    {
      id: 1,
      name: '–ê–¥–º—ñ–Ω',
      email: 'admin@example.com',
      active: true,
      role: 'admin'
    },
    {
      id: 2,
      name: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      email: 'user@example.com',
      active: true,
      role: 'user'
    }
  ]

  mockUsers.forEach(user => store.addUser(user))

  const wrapper = mount(UserList)

  // –í–∏–±–∏—Ä–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∑–∞ —Ä–æ–ª–ª—é
  const roleFilter = wrapper.find('[data-testid="role-filter"]')
  await roleFilter.setValue('admin')

  await wrapper.vm.$nextTick()

  expect(store.filteredUsers).toHaveLength(1)
  expect(store.filteredUsers[0].role).toBe('admin')
})

test('–ø–æ–≤–∏–Ω–µ–Ω —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ —Å—Ç–∞—Ç—É—Å–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ', async () => {
  const store = useUserStore()
  const mockUsers: User[] = [
    {
      id: 1,
      name: '–ê–∫—Ç–∏–≤–Ω–∏–π',
      email: 'active@example.com',
      active: true,
      role: 'user'
    },
    {
      id: 2,
      name: '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π',
      email: 'inactive@example.com',
      active: false,
      role: 'user'
    }
  ]

  mockUsers.forEach(user => store.addUser(user))

  const wrapper = mount(UserList)

  // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö
  const activeFilter = wrapper.find('[data-testid="active-filter"]')
  await activeFilter.setValue('true')

  await wrapper.vm.$nextTick()

  expect(store.filteredUsers).toHaveLength(1)
  expect(store.filteredUsers[0].active).toBe(true)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ñ—ñ–ª—å—Ç—Ä–∏', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç',
    email: 'test@example.com',
    active: true,
    role: 'user'
  }

  store.addUser(mockUser)

  const wrapper = mount(UserList)

  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  await wrapper.find('[data-testid="search-input"]').setValue('—Ç–µ—Å—Ç')
  await wrapper.find('[data-testid="role-filter"]').setValue('admin')

  // –û—á–∏—â—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
  await wrapper.find('[data-testid="clear-filters-btn"]').trigger('click')

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –æ—á–∏—â–µ–Ω—ñ
  expect((wrapper.find('[data-testid="search-input"]').element as HTMLInputElement).value).toBe('')
  expect((wrapper.find('[data-testid="role-filter"]').element as HTMLSelectElement).value).toBe('')
  expect(store.filters).toEqual({})
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–±—Ä–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'test@example.com',
    active: true,
    role: 'user'
  }

  store.addUser(mockUser)

  const wrapper = mount(UserList)

  // –ö–ª—ñ–∫–∞—î–º–æ –Ω–∞ –∫–∞—Ä—Ç–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  await wrapper.find('[data-testid="user-card-1"]').trigger('click')

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π —è–∫ –ø–æ—Ç–æ—á–Ω–∏–π
  expect(store.currentUser).toEqual(mockUser)

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –µ–º—ñ—Ç–Ω—É—Ç–∞ –ø–æ–¥—ñ—è
  const selectedEvents = wrapper.emitted('userSelected')
  expect(selectedEvents).toHaveLength(1)
  expect(selectedEvents![0]).toEqual([mockUser])
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–º–∏–∫–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–∫—É', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'test@example.com',
    active: true,
    role: 'user'
  }

  store.addUser(mockUser)

  // –ú–æ–∫–∞—î–º–æ API –≤—ñ–¥–ø–æ–≤—ñ–¥—å
  server.use(
    http.put('/api/users/1', () => {
      return HttpResponse.json({
        ...mockUser,
        active: false
      })
    })
  )

  const wrapper = mount(UserList)

  // –ö–ª—ñ–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
  await wrapper.find('[data-testid="toggle-btn-1"]').trigger('click')

  const updateEvents = wrapper.emitted('userUpdated')
  expect(updateEvents).toHaveLength(1)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è',
    email: 'delete@example.com',
    active: true,
    role: 'user'
  }

  store.addUser(mockUser)
  mockConfirm.mockReturnValue(true) // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è

  const wrapper = mount(UserList)

  // –ö–ª—ñ–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è
  await wrapper.find('[data-testid="delete-btn-1"]').trigger('click')

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  expect(mockConfirm).toHaveBeenCalled()

  const deleteEvents = wrapper.emitted('userDeleted')
  expect(deleteEvents).toHaveLength(1)
  expect(deleteEvents![0]).toEqual([mockUser.id])
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ —Å–ø–∏—Å–∫—É', async () => {
  const store = useUserStore()
  store.loading = true

  const wrapper = mount(UserList)
  
  expect(wrapper.find('[data-testid="loading"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="loading"]').text()).toContain('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É –∑ –∫–Ω–æ–ø–∫–æ—é –ø–æ–≤—Ç–æ—Ä—É', async () => {
  const store = useUserStore()
  store.error = '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è'

  const wrapper = mount(UserList)
  
  expect(wrapper.find('[data-testid="error"]').exists()).toBe(true)
  expect(wrapper.find('[data-testid="retry-btn"]').exists()).toBe(true)
})

// üîÑ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ–π–Ω—ñ —Ç–µ—Å—Ç–∏ store + –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏

test('–ø–æ–≤–∏–Ω–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –º—ñ–∂ UserList —Ç–∞ UserProfile', async () => {
  const store = useUserStore()
  const mockUser: User = {
    id: 1,
    name: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
    email: 'sync@example.com',
    active: true,
    role: 'user'
  }

  store.addUser(mockUser)

  const listWrapper = mount(UserList)
  const profileWrapper = mount(UserProfile)

  // –í–∏–±–∏—Ä–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å–ø–∏—Å–∫—É
  await listWrapper.find('[data-testid="user-card-1"]').trigger('click')

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –ø—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–∏–≤—Å—è
  expect(store.currentUser).toEqual(mockUser)
  expect(profileWrapper.find('[data-testid="user-name"]').text()).toBe(mockUser.name)
}) 
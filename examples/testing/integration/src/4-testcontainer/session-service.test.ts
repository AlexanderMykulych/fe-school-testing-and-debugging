import { test, expect, beforeAll, afterAll, beforeEach } from 'vitest'
import { SessionService, type SessionData } from './session-service'
import { getRedisConfig } from '../../globalSetup'

// üê≥ TestContainer setup –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
let sessionService: SessionService

beforeAll(async () => {
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  console.log('üîó –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ Redis –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...')
  
  const { host, port } = getRedisConfig()
  console.log(`üìç –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Redis –Ω–∞ ${host}:${port}`)

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Ä–≤—ñ—Å –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  sessionService = new SessionService({
    host,
    port
  })

  // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Redis
  await sessionService.connect()
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è
  const pong = await sessionService.ping()
  expect(pong).toBe('PONG')
  
  console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ Redis –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
}, 30_000) // –°–∫–æ—Ä–æ—á—É—î–º–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è, –æ—Å–∫—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π

afterAll(async () => {
  // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –≤—ñ–¥ Redis (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑—É–ø–∏–Ω–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ globalSetup)
  if (sessionService) {
    console.log('üîå –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ Redis...')
    await sessionService.disconnect()
  }
}, 10_000)

beforeEach(async () => {
  // –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
  await sessionService.clearAllSessions()
})

// üì¶ –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ —Å–µ—Å—ñ—è–º–∏

test('–ø–æ–≤–∏–Ω–µ–Ω —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–µ—Å—ñ—é', async () => {
  const sessionId = 'test-session-1'
  const sessionData: SessionData = {
    userId: 1,
    username: 'testuser',
    email: 'test@example.com',
    role: 'admin',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é
  await sessionService.createSession(sessionId, sessionData, 60) // 60 —Å–µ–∫—É–Ω–¥ TTL

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ—è —ñ—Å–Ω—É—î
  const exists = await sessionService.sessionExists(sessionId)
  expect(exists).toBe(true)

  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Å–µ—Å—ñ—ó
  const retrievedSession = await sessionService.getSession(sessionId)
  expect(retrievedSession).toEqual(sessionData)
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ null –¥–ª—è –Ω–µ—ñ—Å–Ω—É—é—á–æ—ó —Å–µ—Å—ñ—ó', async () => {
  const session = await sessionService.getSession('nonexistent-session')
  expect(session).toBeNull()
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é', async () => {
  const sessionId = 'session-to-delete'
  const sessionData: SessionData = {
    userId: 2,
    username: 'deleteuser',
    email: 'delete@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é
  await sessionService.createSession(sessionId, sessionData)
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —ñ—Å–Ω—É—î
  expect(await sessionService.sessionExists(sessionId)).toBe(true)

  // –í–∏–¥–∞–ª—è—î–º–æ
  const deleted = await sessionService.deleteSession(sessionId)
  expect(deleted).toBe(true)

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î
  expect(await sessionService.sessionExists(sessionId)).toBe(false)
})

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ–π

test('–ø–æ–≤–∏–Ω–µ–Ω –æ–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é', async () => {
  const sessionId = 'session-to-update'
  const originalData: SessionData = {
    userId: 3,
    username: 'originaluser',
    email: 'original@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é
  await sessionService.createSession(sessionId, originalData)

  // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ
  const updated = await sessionService.updateSession(sessionId, {
    username: 'updateduser',
    role: 'admin'
  })
  expect(updated).toBe(true)

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ
  const updatedSession = await sessionService.getSession(sessionId)
  expect(updatedSession).toMatchObject({
    ...originalData,
    username: 'updateduser',
    role: 'admin'
  })
})

test('–Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –æ–Ω–æ–≤–∏—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é', async () => {
  const updated = await sessionService.updateSession('nonexistent', {
    username: 'newname'
  })
  expect(updated).toBe(false)
})

// ‚è±Ô∏è TTL —Ç–∞ expire

test('–ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —Å–µ—Å—ñ—ó', async () => {
  const sessionId = 'session-to-extend'
  const sessionData: SessionData = {
    userId: 4,
    username: 'extenduser',
    email: 'extend@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ –∫–æ—Ä–æ—Ç–∫–∏–º TTL
  await sessionService.createSession(sessionId, sessionData, 5) // 5 —Å–µ–∫—É–Ω–¥

  // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó
  const extended = await sessionService.extendSession(sessionId, 60) // 60 —Å–µ–∫—É–Ω–¥
  expect(extended).toBe(true)

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é
  const info = await sessionService.getSessionInfo(sessionId)
  expect(info).toBeDefined()
  expect(info!.exists).toBe(true)
  expect(info!.ttl).toBeGreaterThan(50) // –ú–∞—î –±—É—Ç–∏ –±–ª–∏–∑—å–∫–æ 60 —Å–µ–∫—É–Ω–¥
})

test('—Å–µ—Å—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–¥–∞–ª—è—Ç–∏—Å—è –ø—ñ—Å–ª—è TTL', async () => {
  const sessionId = 'short-lived-session'
  const sessionData: SessionData = {
    userId: 5,
    username: 'shortuser',
    email: 'short@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 1000
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –∑ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–º TTL
  await sessionService.createSession(sessionId, sessionData, 1) // 1 —Å–µ–∫—É–Ω–¥–∞

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —ñ—Å–Ω—É—î
  expect(await sessionService.sessionExists(sessionId)).toBe(true)

  // –ß–µ–∫–∞—î–º–æ –±—ñ–ª—å—à–µ –Ω—ñ–∂ TTL
  await new Promise(resolve => setTimeout(resolve, 1500))

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –±—ñ–ª—å—à–µ –Ω–µ —ñ—Å–Ω—É—î
  expect(await sessionService.sessionExists(sessionId)).toBe(false)
})

// üë• –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏

test('–ø–æ–≤–∏–Ω–µ–Ω –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', async () => {
  const userId = 10
  const sessions = [
    {
      id: 'user-session-1',
      data: {
        userId,
        username: 'multiuser',
        email: 'multi@example.com',
        role: 'user',
        loginTime: Date.now(),
        expiresAt: Date.now() + 3600000
      }
    },
    {
      id: 'user-session-2',
      data: {
        userId,
        username: 'multiuser',
        email: 'multi@example.com',
        role: 'user',
        loginTime: Date.now() + 1000,
        expiresAt: Date.now() + 3600000
      }
    }
  ]

  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ —Å–µ—Å—ñ–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  for (const session of sessions) {
    await sessionService.createSession(session.id, session.data)
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é –¥–ª—è —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  await sessionService.createSession('other-user-session', {
    userId: 99,
    username: 'otheruser',
    email: 'other@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  })

  // –û—Ç—Ä–∏–º—É—î–º–æ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const userSessions = await sessionService.getUserSessions(userId)
  
  expect(userSessions).toHaveLength(2)
  expect(userSessions).toContain('user-session-1')
  expect(userSessions).toContain('user-session-2')
})

test('–ø–æ–≤–∏–Ω–µ–Ω –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞', async () => {
  const userId = 11
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ —Å–µ—Å—ñ–π
  await sessionService.createSession('delete-session-1', {
    userId,
    username: 'deleteall',
    email: 'deleteall@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  })
  
  await sessionService.createSession('delete-session-2', {
    userId,
    username: 'deleteall',
    email: 'deleteall@example.com',
    role: 'user',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  })

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ—ó —ñ—Å–Ω—É—é—Ç—å
  expect(await sessionService.getUserSessions(userId)).toHaveLength(2)

  // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  const deletedCount = await sessionService.deleteUserSessions(userId)
  expect(deletedCount).toBe(2)

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ–π –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î
  expect(await sessionService.getUserSessions(userId)).toHaveLength(0)
})

// üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

test('–ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—ñ–π', async () => {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ —Å–µ—Å—ñ–π –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
  const sessions = [
    { id: 'stats-1', userId: 20 },
    { id: 'stats-2', userId: 20 },
    { id: 'stats-3', userId: 21 },
    { id: 'stats-4', userId: 22 }
  ]

  for (const session of sessions) {
    await sessionService.createSession(session.id, {
      userId: session.userId,
      username: `user${session.userId}`,
      email: `user${session.userId}@example.com`,
      role: 'user',
      loginTime: Date.now(),
      expiresAt: Date.now() + 3600000
    })
  }

  // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const stats = await sessionService.getSessionStats()
  
  expect(stats.totalSessions).toBe(4)
  expect(stats.totalUsers).toBe(3) // userId: 20, 21, 22
  expect(stats.averageSessionSize).toBeGreaterThan(0)
})

// üßπ –û—á–∏—â–µ–Ω–Ω—è

test('–ø–æ–≤–∏–Ω–µ–Ω –æ—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å–µ—Å—ñ—ó', async () => {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ —Å–µ—Å—ñ–π
  for (let i = 1; i <= 3; i++) {
    await sessionService.createSession(`clear-session-${i}`, {
      userId: i,
      username: `clearuser${i}`,
      email: `clear${i}@example.com`,
      role: 'user',
      loginTime: Date.now(),
      expiresAt: Date.now() + 3600000
    })
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Å–µ—Å—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω—ñ
  const statsBefore = await sessionService.getSessionStats()
  expect(statsBefore.totalSessions).toBe(3)

  // –û—á–∏—â—É—î–º–æ –≤—Å—ñ —Å–µ—Å—ñ—ó
  const clearedCount = await sessionService.clearAllSessions()
  expect(clearedCount).toBe(3)

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ –≤—Å–µ –æ—á–∏—â–µ–Ω–æ
  const statsAfter = await sessionService.getSessionStats()
  expect(statsAfter.totalSessions).toBe(0)
})

// üîç –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Å—ñ—é

test('–ø–æ–≤–∏–Ω–µ–Ω –Ω–∞–¥–∞—Ç–∏ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ—Å—ñ—é', async () => {
  const sessionId = 'info-session'
  const sessionData: SessionData = {
    userId: 30,
    username: 'infouser',
    email: 'info@example.com',
    role: 'admin',
    loginTime: Date.now(),
    expiresAt: Date.now() + 3600000
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–µ—Å—ñ—é
  await sessionService.createSession(sessionId, sessionData, 120) // 2 —Ö–≤–∏–ª–∏–Ω–∏ TTL

  // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
  const info = await sessionService.getSessionInfo(sessionId)
  
  expect(info).toBeDefined()
  expect(info!.exists).toBe(true)
  expect(info!.ttl).toBeGreaterThan(110) // –ú–∞—î –±—É—Ç–∏ –±–ª–∏–∑—å–∫–æ 120 —Å–µ–∫—É–Ω–¥
  expect(info!.ttl).toBeLessThanOrEqual(120)
  expect(info!.size).toBeGreaterThan(0) // –†–æ–∑–º—ñ—Ä –¥–∞–Ω–∏—Ö —É –±–∞–π—Ç–∞—Ö
})

test('–ø–æ–≤–∏–Ω–µ–Ω –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ null –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –Ω–µ—ñ—Å–Ω—É—é—á—É —Å–µ—Å—ñ—é', async () => {
  const info = await sessionService.getSessionInfo('nonexistent-info-session')
  expect(info).toBeNull()
}) 
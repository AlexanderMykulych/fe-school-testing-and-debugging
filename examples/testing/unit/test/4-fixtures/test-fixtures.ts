import { test as baseTest } from 'vitest';
import { RawUserData } from '../../src/4-fixtures/data-processor';

/**
 * VITEST FIXTURES —á–µ—Ä–µ–∑ test.extend
 * 
 * Fixtures –≤ Vitest - —Ü–µ –ø–æ—Ç—É–∂–Ω–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º –¥–ª—è:
 * - –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 * - –ü–µ—Ä–µ—ñ—Å–ø–æ–ª—å–∑—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ setup/teardown
 * - Dependency injection –≤ —Ç–µ—Å—Ç–∏
 */

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞—à–∏—Ö fixtures
interface TestFixtures {
  // –ë–∞–∑–æ–≤–∏–π –≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  validUser: RawUserData;
  
  // –ê–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á (–Ω–µ–¥–∞–≤–Ω–æ –ª–æ–≥—ñ–Ω–∏–≤—Å—è)
  activeUser: RawUserData;
  
  // –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  inactiveUser: RawUserData;
  
  // –ú–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è batch —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
  usersBatch: RawUserData[];
  
  // –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
  invalidUser: RawUserData;
  
  // –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
  userDatabase: Map<string, RawUserData>;
  
  // –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
  testLogger: {
    logs: string[];
    log: (message: string) => void;
    clear: () => void;
  };
}

// –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–π test –∑ fixtures
export const test = baseTest.extend<TestFixtures>({
  // –ë–∞–∑–æ–≤–∏–π –≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  validUser: async ({}, use) => {
    const user: RawUserData = {
      id: 'user-123',
      firstName: 'John',
      lastName: 'Doe',
      email: 'john.doe@example.com',
      birthDate: '1990-05-15T00:00:00.000Z',
      address: {
        street: '123 Main St',
        city: 'New York',
        country: 'USA',
        zipCode: '10001'
      },
      preferences: {
        language: 'en',
        newsletter: true,
        notifications: true
      },
      metadata: {
        createdAt: '2023-01-15T10:30:00.000Z',
        lastLoginAt: '2024-01-10T14:20:00.000Z',
        loginCount: 25
      }
    };
    
    await use(user);
    // Cleanup: —É —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω
  },

  // –ê–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  activeUser: async ({}, use) => {
    const user: RawUserData = {
      id: 'active-user-456',
      firstName: 'Jane',
      lastName: 'Smith',
      email: 'jane.smith@example.com',
      birthDate: '1985-03-22T00:00:00.000Z',
      address: {
        street: '456 Oak Ave',
        city: 'Los Angeles',
        country: 'USA',
        zipCode: '90210'
      },
      preferences: {
        language: 'en',
        newsletter: true,
        notifications: true
      },
      metadata: {
        createdAt: '2023-06-01T08:00:00.000Z',
        lastLoginAt: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), // –í—á–æ—Ä–∞
        loginCount: 50
      }
    };
    
    await use(user);
  },

  // –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  inactiveUser: async ({}, use) => {
    const user: RawUserData = {
      id: 'inactive-user-789',
      firstName: 'Bob',
      lastName: 'Johnson',
      email: 'bob.johnson@example.com',
      birthDate: '1975-11-08T00:00:00.000Z',
      address: {
        street: '789 Pine St',
        city: 'Chicago',
        country: 'USA',
        zipCode: '60601'
      },
      preferences: {
        language: 'en',
        newsletter: false,
        notifications: false
      },
      metadata: {
        createdAt: '2022-03-10T15:45:00.000Z',
        lastLoginAt: '2023-10-01T12:00:00.000Z', // –î–∞–≤–Ω–æ
        loginCount: 5
      }
    };
    
    await use(user);
  },

  // –ú–∞—Å–∏–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —ñ–Ω—à–∏—Ö fixtures)
  usersBatch: async ({ validUser, activeUser, inactiveUser }, use) => {
    const batch = [validUser, activeUser, inactiveUser];
    await use(batch);
  },

  // –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  invalidUser: async ({}, use) => {
    const user: RawUserData = {
      id: '', // –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID
      firstName: '',
      lastName: 'InvalidUser',
      email: 'invalid-email', // –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π email
      birthDate: '2030-01-01T00:00:00.000Z', // –ú–∞–π–±—É—Ç–Ω—è –¥–∞—Ç–∞
      address: {
        street: '', // –í—ñ–¥—Å—É—Ç–Ω—è –∞–¥—Ä–µ—Å–∞
        city: '',
        country: '',
        zipCode: ''
      },
      preferences: {
        language: 'en',
        newsletter: true,
        notifications: true
      },
      metadata: {
        createdAt: 'invalid-date', // –ù–µ–≤–∞–ª—ñ–¥–Ω–∞ –¥–∞—Ç–∞
        lastLoginAt: undefined,
        loginCount: -1 // –ù–µ–≥–∞—Ç–∏–≤–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å
      }
    };
    
    await use(user);
  },

  // –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—ñ–º—ñ—Ç–∞—Ü—ñ—è)
  userDatabase: async ({ validUser, activeUser, inactiveUser }, use) => {
    const db = new Map<string, RawUserData>();
    
    // –ù–∞–ø–æ–≤–Ω—é—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    db.set(validUser.id, validUser);
    db.set(activeUser.id, activeUser);
    db.set(inactiveUser.id, inactiveUser);
    
    console.log(`üîß Setup: Database initialized with ${db.size} users`);
    
    await use(db);
    
    // Cleanup
    db.clear();
    console.log('üßπ Teardown: Database cleared');
  },

  // –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç—ñ–≤
  testLogger: async ({}, use) => {
    const logger = {
      logs: [] as string[],
      log: (message: string) => {
        const timestamp = new Date().toISOString();
        logger.logs.push(`[${timestamp}] ${message}`);
      },
      clear: () => {
        logger.logs = [];
      }
    };
    
    logger.log('Test logger initialized');
    
    await use(logger);
    
    // Cleanup - –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –ª–æ–∞–≥–∏
    if (logger.logs.length > 1) { // > 1 —Ç–æ–º—É —â–æ —î –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –ª–æ–≥
      console.log('üìã Test logs:', logger.logs);
    }
  }
});

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π test –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fixture
export const testWithAutoSetup = test.extend({
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π fixture - –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ —Ç–µ—Å—Ç—ñ
  autoSetup: [
    async ({}, use) => {
      console.log('üöÄ Auto setup: Test environment prepared');
      
      // –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–æ–±–∏—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –ø—ñ–¥–≥–æ—Ç–æ–≤–∫—É
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—É, –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–∫—ñ–≤, —Ç–æ—â–æ
      
      await use('setup-complete');
      
      console.log('‚úÖ Auto teardown: Test environment cleaned');
    },
    { auto: true } // –ú–∞—Ä–∫ —è–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π fixture
  ]
});

const newTest = test.extend<{}>({
  testLogger: ({ testLogger }, use) => {

  }
})

// Per-file fixture - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —Ñ–∞–π–ª
export const testWithFileScope = baseTest.extend({
  sharedCounter: [
    async ({}, use) => {
      const counter = { value: 0 };
      console.log('üìÅ File-scoped fixture initialized');
      
      await use(counter);
      
      console.log(`üìÅ File-scoped fixture cleanup. Final counter: ${counter.value}`);
    },
    { scope: 'file' }
  ]
});

// –ü—Ä–∏–∫–ª–∞–¥ injected fixture (–º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–∏–∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
export const testWithConfig = baseTest.extend({
  apiUrl: [
    '/api/v1', // default –∑–Ω–∞—á–µ–Ω–Ω—è
    { injected: true } // –º–æ–∂–µ –±—É—Ç–∏ –ø–µ—Ä–µ–∏–∑–Ω–∞—á–µ–Ω–æ –≤ vitest.config.ts
  ],
  
  apiClient: async ({ apiUrl }, use) => {
    const client = {
      baseUrl: apiUrl,
      get: (path: string) => `GET ${apiUrl}${path}`,
      post: (path: string) => `POST ${apiUrl}${path}`
    };
    
    await use(client);
  }
}); 
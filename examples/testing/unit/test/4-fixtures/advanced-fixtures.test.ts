import { test, expect, vi } from 'vitest';

/**
 * –ü–†–û–î–í–ò–ù–£–¢–Ü VITEST FIXTURES
 * 
 * –¶–µ–π —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î:
 * - Injected fixtures (—è–∫—ñ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–∏–∑–Ω–∞—á–∏—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
 * - Per-file —Ç–∞ per-worker scoped fixtures
 * - Scoped values –¥–ª—è override contexts
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ fixtures
 * - –ö–æ–º–ø–æ–∑–∏—Ü—ñ—é fixtures
 */

// –ë–∞–∑–æ–≤–∏–π test –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏
const baseTest = test;

/**
 * Injected fixtures - –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ —Ç–µ—Å—Ç–∞—Ö
 * 
 * @param apiUrl - API URL
 * @param dbUrl - Database URL
 * @param httpClient - HTTP –∫–ª–∏–µ–Ω—Ç
 * @param dbClient - Database –∫–ª–∏–µ–Ω—Ç
 */
const testWithConfig = baseTest.extend<{
  apiUrl: string;
  dbUrl: string;
  httpClient: {
    baseUrl: string;
    get: (path: string) => Promise<{ data: string }>;
    post: (path: string, data: any) => Promise<{ body: any }>;
  };
  dbClient: {
    url: string;
    query: (sql: string) => Promise<any[]>;
  };
}>({
  // Injected values - –¥–æ—Å—Ç—É–ø–Ω—ñ –±–µ–∑ setup/teardown
  apiUrl: ['http://localhost:3000/api', { injected: true }],
  dbUrl: ['sqlite://test.db', { injected: true }],
  
  // Computed fixtures - –∑–∞–ª–µ–∂–∞—Ç—å –≤—ñ–¥ injected values
  httpClient: ({ apiUrl }, use) => use({
    baseUrl: apiUrl,
    async get(path: string) {
      return { data: `GET ${path} from ${apiUrl}` };
    },
    async post(path: string, data: any) {
      return { body: data };
    }
  }),

  dbClient: ({ dbUrl }, use) => use({
    url: dbUrl,
    async query(sql: string) {
      return [{ result: `Query: ${sql} on ${dbUrl}` }];
    }
  })
});

// File-scoped fixture - —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è —Ä–∞–∑ –Ω–∞ —Ñ–∞–π–ª
const testWithFileCache = baseTest.extend<{
  fileCache: {
    set: (key: string, value: any) => void;
    get: (key: string) => any;
    size: () => number;
    clear: () => void;
  };
}>({
  fileCache: [
    async ({}, use) => {
      const cache = new Map<string, any>();
      console.log('üóÉÔ∏è File cache initialized');
      
      await use({
        set: (key: string, value: any) => cache.set(key, value),
        get: (key: string) => cache.get(key),
        size: () => cache.size,
        clear: () => cache.clear()
      });
      
      console.log(`üóÉÔ∏è File cache cleanup. Final size: ${cache.size}`);
    },
    { scope: 'file' }
  ]
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π fixture - –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞–≤–∂–¥–∏
const testWithAutoLogger = baseTest.extend<{
  autoLogger: {
    info: (msg: string) => void;
    error: (msg: string) => void;
    getLogs: () => string[];
  };
}>({
  autoLogger: [
    async ({}, use) => {
      const logs: string[] = [];
      const logger = {
        info: (msg: string) => logs.push(`[INFO] ${msg}`),
        error: (msg: string) => logs.push(`[ERROR] ${msg}`),
        getLogs: () => [...logs]
      };
      
      logger.info('Auto logger started');
      await use(logger);
      logger.info('Auto logger finished');
      
      console.log('üìù Auto logs:', logs);
    },
    { auto: true } // –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
  ]
});

// –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è fixtures - –æ–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ fixtures –≤ –æ–¥–∏–Ω —Ç–µ—Å—Ç
const testWithAll = baseTest.extend<{
  apiUrl: string;
  dbUrl: string;
  httpClient: {
    baseUrl: string;
    get: (path: string) => Promise<{ data: string }>;
    post: (path: string, data: any) => Promise<{ body: any }>;
  };
  dbClient: {
    url: string;
    query: (sql: string) => Promise<any[]>;
  };
  fileCache: {
    set: (key: string, value: any) => void;
    get: (key: string) => any;
    size: () => number;
    clear: () => void;
  };
  autoLogger: {
    info: (msg: string) => void;
    error: (msg: string) => void;
    getLogs: () => string[];
  };
}>({
  // –ö–æ–ø—ñ—é—î–º–æ –≤—Å—ñ fixtures
  apiUrl: ['http://localhost:3000/api', { injected: true }],
  dbUrl: ['sqlite://test.db', { injected: true }],

  httpClient: ({ apiUrl }, use) => use({
    baseUrl: apiUrl,
    async get(path: string) {
      return { data: `GET ${path} from ${apiUrl}` };
    },
    async post(path: string, data: any) {
      return { body: data };
    }
  }),

  dbClient: ({ dbUrl }, use) => use({
    url: dbUrl,
    async query(sql: string) {
      return [{ result: `Query: ${sql} on ${dbUrl}` }];
    }
  }),

  fileCache: [
    async ({ }, use) => {
      const cache = new Map<string, any>();
      console.log('üóÉÔ∏è File cache initialized');

      await use({
        set: (key: string, value: any) => cache.set(key, value),
        get: (key: string) => cache.get(key),
        size: () => cache.size,
        clear: () => cache.clear()
      });

      console.log(`üóÉÔ∏è File cache cleanup. Final size: ${cache.size}`);
    },
    { scope: 'file' }
  ],

  autoLogger: [
    async ({ }, use) => {
      const logs: string[] = [];
      const logger = {
        info: (msg: string) => logs.push(`[INFO] ${msg}`),
        error: (msg: string) => logs.push(`[ERROR] ${msg}`),
        getLogs: () => [...logs]
      };

      logger.info('Auto logger started');
      await use(logger);
      logger.info('Auto logger finished');

      console.log('üìù Auto logs:', logs);
    },
    { auto: true }
  ]
});

// –¢–µ—Å—Ç–∏ –∑ injected fixtures
testWithConfig('should use injected API URL', ({ apiUrl, httpClient }) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ (–º–æ–∂–µ –±—É—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ)
  expect(apiUrl).toBeDefined();
  expect(httpClient.baseUrl).toBe(apiUrl);
});

testWithConfig('should use injected database URL', ({ dbUrl, dbClient }) => {
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–æ (–º–æ–∂–µ –±—É—Ç–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–µ)
  expect(dbUrl).toBeDefined();
  expect(dbClient.url).toBe(dbUrl);
});

testWithConfig('should make HTTP requests', async ({ httpClient }) => {
  const getResult = await httpClient.get('/users');
  const postResult = await httpClient.post('/users', { name: 'John' });
  
  expect(getResult.data).toContain('GET');
  expect(postResult.body).toEqual({ name: 'John' });
});

// –¢–µ—Å—Ç–∏ –∑ file-scoped cache
testWithFileCache('should initialize file cache - test 1', ({ fileCache }) => {
  expect(fileCache.size()).toBe(0);
  fileCache.set('key1', 'value1');
  expect(fileCache.size()).toBe(1);
});

testWithFileCache('should persist file cache - test 2', ({ fileCache }) => {
  // Cache –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –º—ñ–∂ —Ç–µ—Å—Ç–∞–º–∏ –≤ —Ñ–∞–π–ª—ñ
  expect(fileCache.size()).toBe(1);
  expect(fileCache.get('key1')).toBe('value1');
  
  fileCache.set('key2', 'value2');
  expect(fileCache.size()).toBe(2);
});

testWithFileCache('should still have file cache - test 3', ({ fileCache }) => {
  expect(fileCache.size()).toBe(2);
  expect(fileCache.get('key1')).toBe('value1');
  expect(fileCache.get('key2')).toBe('value2');
});

// –¢–µ—Å—Ç –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fixture
testWithAutoLogger('should work with auto logger', ({ autoLogger }) => {
  // autoLogger –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π
  autoLogger.info('Test message');
  autoLogger.error('Test error');
  
  const logs = autoLogger.getLogs();
  expect(logs).toContain('[INFO] Auto logger started');
  expect(logs).toContain('[INFO] Test message');
  expect(logs).toContain('[ERROR] Test error');
});

// –¢–µ—Å—Ç –ë–ï–ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–≤—Ç–æ–ª–æ–≥–≥–µ—Ä–∞, –∞–ª–µ –≤—ñ–Ω –≤—Å–µ –æ–¥–Ω–æ —Å–ø—Ä–∞—Ü—é—î
testWithAutoLogger('should auto log even without using logger', () => {
  // autoLogger –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —è–≤–Ω–æ, –∞–ª–µ fixture –≤—Å–µ –æ–¥–Ω–æ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è
  expect(true).toBe(true);
});

// –¢–µ—Å—Ç–∏ –∑ –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–º–∏ fixtures
testWithAll('should use all fixtures together', ({ 
  apiUrl, 
  httpClient, 
  fileCache, 
  autoLogger 
}) => {
  autoLogger.info('Using combined fixtures');
  
  expect(apiUrl).toBeDefined();
  expect(httpClient.baseUrl).toBe(apiUrl);
  
  fileCache.set('test', 'combined');
  expect(fileCache.get('test')).toBe('combined');
  
  autoLogger.info('All fixtures working together');
});

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è scoped values (override)
const testWithScopedOverrides = baseTest.extend<{
  environment: string;
  config: {
    env: string;
    debug: boolean;
  };
}>({
  environment: 'development',
  config: ({ environment }, use) => use({
    env: environment,
    debug: environment === 'development'
  })
});

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ environment
testWithScopedOverrides('should use default environment', ({ config }) => {
  expect(config.env).toBe('development');
  expect(config.debug).toBe(true);
});

// –ì—Ä—É–ø–∏ —Ç–µ—Å—Ç—ñ–≤ –∑ override (—ñ–º—ñ—Ç—É—î–º–æ describe –±–µ–∑ –≤–∫–ª–∞–¥–µ–Ω–æ—Å—Ç—ñ)
const productionTests = baseTest.extend<{
  environment: string;
  config: {
    env: string;
    debug: boolean;
  };
}>({
  environment: 'production', // override default
  config: ({ environment }, use) => use({
    env: environment,
    debug: environment === 'development'
  })
});

productionTests('should use production environment', ({ config }) => {
  expect(config.env).toBe('production');
  expect(config.debug).toBe(false);
});

const testingTests = baseTest.extend<{
  environment: string;
  config: {
    env: string;
    debug: boolean;
  };
}>({
  environment: 'testing',
  config: ({ environment }, use) => use({
    env: environment,
    debug: environment === 'development'
  })
});

testingTests('should use testing environment', ({ config }) => {
  expect(config.env).toBe('testing');
  expect(config.debug).toBe(false);
});

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è fixture cleanup order
const testWithCleanupOrder = baseTest.extend<{
  first: string;
  second: string;
  third: string;
}>({
  first: async ({}, use) => {
    console.log('üöÄ First fixture setup');
    await use('first-value');
    console.log('üßπ First fixture cleanup');
  },
  
  second: async ({ first }, use) => {
    console.log('üöÄ Second fixture setup, depends on:', first);
    await use('second-value');
    console.log('üßπ Second fixture cleanup');
  },
  
  third: async ({ first, second }, use) => {
    console.log('üöÄ Third fixture setup, depends on:', first, second);
    await use('third-value');
    console.log('üßπ Third fixture cleanup');
  }
});

testWithCleanupOrder('should demonstrate cleanup order', ({ first, second, third }) => {
  // Cleanup –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É: third -> second -> first
  expect(first).toBe('first-value');
  expect(second).toBe('second-value');
  expect(third).toBe('third-value');
});

// –¢–µ—Å—Ç –∑ –º–æ–∫ fixtures
const testWithMocks = baseTest.extend<{
  mockDate: Date;
  mockConsole: {
    getLogs: () => string[];
  };
}>({
  mockDate: async ({}, use) => {
    const fixedDate = new Date('2024-01-15T12:00:00.000Z');
    vi.useFakeTimers();
    vi.setSystemTime(fixedDate);
    
    await use(fixedDate);
    
    vi.useRealTimers();
  },
  
  mockConsole: async ({}, use) => {
    const originalLog = console.log;
    const logs: string[] = [];
    
    console.log = vi.fn((message) => {
      logs.push(message);
    });
    
    await use({
      getLogs: () => [...logs]
    });
    
    console.log = originalLog;
  }
});

testWithMocks('should work with mocked time and console', ({ mockDate, mockConsole }) => {
  console.log('Test message');
  
  expect(new Date()).toEqual(mockDate);
  expect(mockConsole.getLogs()).toContain('Test message');
});

// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π fixture –∑ —Ä–µ—Å—É—Ä—Å–∞–º–∏
const testWithAsyncResources = baseTest.extend<{
  asyncResource: {
    id: string;
    status: string;
    data: { initialized: boolean };
  };
}>({
  asyncResource: async ({}, use) => {
    // –Ü–º—ñ—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É
    const resource = await new Promise<{
      id: string;
      status: string;
      data: { initialized: boolean };
    }>(resolve => {
      setTimeout(() => {
        resolve({
          id: 'resource-123',
          status: 'connected',
          data: { initialized: true }
        });
      }, 10);
    });
    
    console.log('üîó Async resource connected:', resource.id);
    
    await use(resource);
    
    // –Ü–º—ñ—Ç—É—î–º–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    await new Promise(resolve => setTimeout(resolve, 5));
    console.log('üîå Async resource disconnected:', resource.id);
  }
});

testWithAsyncResources('should work with async resources', async ({ asyncResource }) => {
  expect(asyncResource.id).toBe('resource-123');
  expect(asyncResource.status).toBe('connected');
  expect(asyncResource.data.initialized).toBe(true);
}); 
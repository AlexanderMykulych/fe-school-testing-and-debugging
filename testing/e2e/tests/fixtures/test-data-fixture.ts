import { test as base } from '@playwright/test'

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
interface TestProduct {
  id: number
  name: string
  price: number
  description: string
  category: string
  stock: number
  image: string
}

interface TestUser {
  username: string
  password: string
  email: string
  role: 'admin' | 'user'
  firstName: string
  lastName: string
}

interface TestCart {
  items: Array<{
    productId: number
    quantity: number
  }>
  total: number
}

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è test data fixture
interface TestDataFixture {
  generateProduct: () => TestProduct
  generateUser: () => TestUser
  generateCartItems: (count?: number) => TestCart
  getProductCategories: () => string[]
  getTestScenarios: () => TestScenarios
}

// –°—Ü–µ–Ω–∞—Ä—ñ—ó –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
interface TestScenarios {
  happyPath: {
    user: TestUser
    products: TestProduct[]
    expectedTotal: number
  }
  errorCases: {
    invalidLogin: { username: string; password: string }
    outOfStock: TestProduct
    networkError: { delay: number; errorCode: number }
  }
  edgeCases: {
    largeCart: TestCart
    specialCharacters: { productName: string; userName: string }
    boundaries: { minPrice: number; maxPrice: number; maxStock: number }
  }
}

// –†–æ–∑—à–∏—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π —Ç–µ—Å—Ç –∑ test data fixture
export const test = base.extend<TestDataFixture>({
  /**
   * üè≠ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
   */
  generateProduct: async ({}, use) => {
    const generateProduct = (): TestProduct => {
      const productId = Math.floor(Math.random() * 1000) + 1
      const categories = ['–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞', '–ê–∫—Å–µ—Å—É–∞—Ä–∏', '–û–¥—è–≥', '–î—ñ–º —ñ —Å–∞–¥', '–°–ø–æ—Ä—Ç']
      const category = categories[Math.floor(Math.random() * categories.length)]
      
      const productNames = {
        '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞': ['–ù–æ—É—Ç–±—É–∫', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ü–ª–∞–Ω—à–µ—Ç', '–ú–æ–Ω—ñ—Ç–æ—Ä', '–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞'],
        '–ê–∫—Å–µ—Å—É–∞—Ä–∏': ['–ù–∞–≤—É—à–Ω–∏–∫–∏', '–ú–∏—à–∞', '–ó–∞—Ä—è–¥–∫–∞', '–ö–∞–±–µ–ª—å', '–ß–æ—Ö–æ–ª'],
        '–û–¥—è–≥': ['–§—É—Ç–±–æ–ª–∫–∞', '–î–∂–∏–Ω—Å–∏', '–ö—Ä–æ—Å—ñ–≤–∫–∏', '–ö—É—Ä—Ç–∫–∞', '–®–∞–ø–∫–∞'],
        '–î—ñ–º —ñ —Å–∞–¥': ['–õ–∞–º–ø–∞', '–í–∞–∑–∞', '–ü–æ–¥—É—à–∫–∞', '–†–æ—Å–ª–∏–Ω–∞', '–°–≤—ñ—á–∫–∞'],
        '–°–ø–æ—Ä—Ç': ['–ú\'—è—á', '–ì–∞–Ω—Ç–µ–ª—ñ', '–í–µ–ª–æ—Å–∏–ø–µ–¥', '–†–∞–∫–µ—Ç–∫–∞', '–ö—Ä–æ—Å—Å—ñ–≤–∫–∏']
      }
      
      const names = productNames[category as keyof typeof productNames]
      const baseName = names[Math.floor(Math.random() * names.length)]
      const brand = ['Apple', 'Samsung', 'Nike', 'Adidas', 'Sony'][Math.floor(Math.random() * 5)]
      
      return {
        id: productId,
        name: `${brand} ${baseName} Test ${productId}`,
        price: Math.floor(Math.random() * 50000) + 1000, // 1000-51000 –≥—Ä–Ω
        description: `–í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π ${baseName.toLowerCase()} –≤—ñ–¥ ${brand} –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è`,
        category,
        stock: Math.floor(Math.random() * 20) + 1, // 1-20 —à—Ç—É–∫
        image: `https://via.placeholder.com/300x300?text=${encodeURIComponent(baseName)}`
      }
    }
    await use(generateProduct)
  },

  /**
   * üë§ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
   */
  generateUser: async ({}, use) => {
    const generateUser = (): TestUser => {
      const userId = Math.floor(Math.random() * 1000) + 1
      const firstNames = ['–û–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä—ñ—è', '–Ü–≤–∞–Ω', '–ö–∞—Ç–µ—Ä–∏–Ω–∞', '–î–º–∏—Ç—Ä–æ', '–ê–Ω–Ω–∞']
      const lastNames = ['–ü–µ—Ç—Ä–µ–Ω–∫–æ', '–Ü–≤–∞–Ω–µ–Ω–∫–æ', '–ö–æ–≤–∞–ª–µ–Ω–∫–æ', '–¢–∫–∞—á–µ–Ω–∫–æ', '–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ']
      
      const firstName = firstNames[Math.floor(Math.random() * firstNames.length)]
      const lastName = lastNames[Math.floor(Math.random() * lastNames.length)]
      const username = `test_user_${userId}`
      
      return {
        username,
        password: `password${userId}`,
        email: `${username}@test.com`,
        role: Math.random() > 0.8 ? 'admin' : 'user', // 20% –∞–¥–º–∏–Ω—ñ–≤
        firstName,
        lastName
      }
    }
    await use(generateUser)
  },

  /**
   * üõí –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—à–∏–∫—ñ–≤
   */
  generateCartItems: async ({ generateProduct }, use) => {
    const generateCartItems = (count: number = 3): TestCart => {
      const items = []
      let total = 0
      
      for (let i = 0; i < count; i++) {
        const product = generateProduct()
        const quantity = Math.floor(Math.random() * 5) + 1 // 1-5 —à—Ç—É–∫
        
        items.push({
          productId: product.id,
          quantity
        })
        
        total += product.price * quantity
      }
      
      return { items, total }
    }
    await use(generateCartItems)
  },

  /**
   * üìÇ –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Ç–æ–≤–∞—Ä—ñ–≤
   */
  getProductCategories: async ({}, use) => {
    const getProductCategories = (): string[] => {
      return ['–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞', '–ê–∫—Å–µ—Å—É–∞—Ä–∏', '–û–¥—è–≥', '–î—ñ–º —ñ —Å–∞–¥', '–°–ø–æ—Ä—Ç']
    }
    await use(getProductCategories)
  },

  /**
   * üé≠ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó
   */
  getTestScenarios: async ({ generateUser, generateProduct, generateCartItems }, use) => {
    const getTestScenarios = (): TestScenarios => {
      const products = Array.from({ length: 5 }, () => generateProduct())
      
      return {
        happyPath: {
          user: {
            username: 'happy_user',
            password: 'password123',
            email: 'happy@test.com',
            role: 'user',
            firstName: '–¢–µ—Å—Ç–æ–≤–∏–π',
            lastName: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
          },
          products,
          expectedTotal: products.reduce((sum, p) => sum + p.price, 0)
        },
        
        errorCases: {
          invalidLogin: {
            username: 'invalid_user',
            password: 'wrong_password'
          },
          outOfStock: {
            ...generateProduct(),
            stock: 0,
            name: 'Out of Stock Product'
          },
          networkError: {
            delay: 5000,
            errorCode: 500
          }
        },
        
        edgeCases: {
          largeCart: generateCartItems(50), // –í–µ–ª–∏–∫–∏–π –∫–æ—à–∏–∫
          specialCharacters: {
            productName: '–¢–æ–≤–∞—Ä –∑ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª–∞–º–∏ !@#$%^&*()',
            userName: 'user_with_—Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ_—Å–∏–º–≤–æ–ª–∏'
          },
          boundaries: {
            minPrice: 1,
            maxPrice: 999999,
            maxStock: 1000
          }
        }
      }
    }
    await use(getTestScenarios)
  }
})

/**
 * üé≤ –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –¥–∞—Ç–∏
export function randomDate(start: Date = new Date(2024, 0, 1), end: Date = new Date()): Date {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
export function randomString(length: number = 10): string {
  const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  let result = ''
  for (let i = 0; i < length; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length))
  }
  return result
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ email
export function randomEmail(domain: string = 'test.com'): string {
  return `${randomString(8)}@${domain}`
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
export function randomPhone(): string {
  const prefix = '+380'
  const number = Math.floor(Math.random() * 900000000) + 100000000
  return `${prefix}${number}`
}

// –í–∏–±—ñ—Ä –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –∑ –º–∞—Å–∏–≤—É
export function randomChoice<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)]
}

/**
 * üìä –ü—Ä–µ–¥–≤–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞–±–æ—Ä–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
export const standardTestUsers: TestUser[] = [
  {
    username: 'admin',
    password: 'admin123',
    email: 'admin@test.com',
    role: 'admin',
    firstName: '–ê–¥–º—ñ–Ω',
    lastName: '–ê–¥–º—ñ–Ω—Å—å–∫–∏–π'
  },
  {
    username: 'user',
    password: 'user123',
    email: 'user@test.com',
    role: 'user',
    firstName: '–Æ–∑–µ—Ä',
    lastName: '–Æ–∑–µ—Ä—Å—å–∫–∏–π'
  }
]

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏
export const standardTestProducts: TestProduct[] = [
  {
    id: 1,
    name: 'Test Laptop Pro',
    price: 45000,
    description: '–ü–æ—Ç—É–∂–Ω–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏',
    category: '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞',
    stock: 10,
    image: 'https://via.placeholder.com/300x300?text=Laptop'
  },
  {
    id: 2,
    name: 'Test Smartphone',
    price: 25000,
    description: '–°—É—á–∞—Å–Ω–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω –∑ –≤–µ–ª–∏–∫–∏–º –µ–∫—Ä–∞–Ω–æ–º',
    category: '–ï–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞',
    stock: 15,
    image: 'https://via.placeholder.com/300x300?text=Phone'
  },
  {
    id: 3,
    name: 'Test Headphones',
    price: 3500,
    description: '–ë–µ–∑–¥—Ä–æ—Ç–æ–≤—ñ –Ω–∞–≤—É—à–Ω–∏–∫–∏ –∑ —à—É–º–æ–∑–∞–≥–ª—É—à–µ–Ω–Ω—è–º',
    category: '–ê–∫—Å–µ—Å—É–∞—Ä–∏',
    stock: 25,
    image: 'https://via.placeholder.com/300x300?text=Headphones'
  }
]

/**
 * üîß –í–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
 */

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ email
export function isValidEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
  return emailRegex.test(email)
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
export function isValidPhone(phone: string): boolean {
  const phoneRegex = /^\+380\d{9}$/
  return phoneRegex.test(phone)
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –¥–æ–≤–∂–∏–Ω–∏ –ø–∞—Ä–æ–ª—è
export function isValidPassword(password: string, minLength: number = 6): boolean {
  return password.length >= minLength
}

// –ï–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø—ñ–≤
export type { TestProduct, TestUser, TestCart, TestScenarios } 